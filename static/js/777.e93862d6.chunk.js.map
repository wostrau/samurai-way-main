{"version":3,"file":"static/js/777.e93862d6.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","webpack://samurai-way/./src/components/Dialogs/Message/Message.module.css?72d0","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx","components/common/FormControls/FormControls.tsx","hoc/WithRedirectToLogin.tsx","utilities/validators.ts","webpack://samurai-way/./src/components/common/FormControls/FormControls.module.css?7a3d"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__oe96H\",\"dialogsItems\":\"Dialogs_dialogsItems__zeEWD\",\"active\":\"Dialogs_active__t8cjl\",\"messages\":\"Dialogs_messages__Cg2l+\",\"message\":\"Dialogs_message__ZEWo0\"};","import React from 'react';\nimport {NavLink} from 'react-router-dom';\n\ntype DialogItemPropsType = {\n    id: string\n    name: string\n}\n\nexport const DialogItem = (props: DialogItemPropsType) => {\n    return (\n        <div>\n            <NavLink to={`/dialogs/${props.id}`}>\n                {props.name}\n            </NavLink>\n        </div>\n    );\n};","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"Message_dialog__3YV8S\"};","import React from 'react';\nimport styles from './Message.module.css';\n\nexport const Message = (props: { message: string }) => {\n    return <div className={styles.dialog}>{props.message}</div>\n};","import React from 'react'\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form'\nimport {Textarea} from '../../common/FormControls/FormControls'\nimport {maxLength30, minLength2, requiredField} from '../../../utilities/validators'\n\nexport type AddMessageFormValueType = { newMessageBody: string }\n\nconst AddMessageForm: React.FC<InjectedFormProps<AddMessageFormValueType>> = ({handleSubmit}) => {\n    return (\n        <form onSubmit={handleSubmit}>\n            <div>\n                <Field\n                    name={'newMessageBody'}\n                    component={Textarea}\n                    validate={[requiredField, maxLength30, minLength2]}\n                    placeholder=\"type new message\"\n                    cols={30}\n                    rows={5}\n                />\n            </div>\n            <div>\n                <button>Send message</button>\n            </div>\n        </form>\n    )\n}\n\nexport const AddMessageFormRedux = reduxForm<AddMessageFormValueType>({form: 'AddMessageForm'})(AddMessageForm)","import React from 'react'\nimport {dialogsAction, DialogsStateType} from '../../redux/dialogs-reducer'\nimport {Dialogs} from './Dialogs'\nimport {connect} from 'react-redux'\nimport {AppStateType} from '../../redux/redux-store'\nimport {compose} from 'redux'\nimport {withRedirectToLogin} from '../../hoc/WithRedirectToLogin'\n\nexport type MapDispatchToPropsType = {\n    sendMessage: (newMessageBody: string) => void\n};\n\nconst mapStateToProps = (state: AppStateType): DialogsStateType => {\n    return {\n        dialogs: state.dialogsPage.dialogs,\n        messages: state.dialogsPage.messages\n    };\n};\n\nconst DialogsContainer = compose<React.ComponentType>(\n    connect(mapStateToProps, {...dialogsAction} as MapDispatchToPropsType),\n    withRedirectToLogin\n)(Dialogs);\n\nexport default DialogsContainer;","import React from 'react'\nimport styles from './Dialogs.module.css'\nimport {DialogItem} from './DialogItem/DialogItem'\nimport {Message} from './Message/Message'\nimport {MapDispatchToPropsType} from './DialogsContainer'\nimport {DialogsStateType} from '../../redux/dialogs-reducer'\nimport {AddMessageFormRedux, AddMessageFormValueType} from './AddMessageForm/AddMessageForm'\n\n\ntype DialogsPropsType = DialogsStateType & MapDispatchToPropsType\n\nexport const Dialogs: React.FC<DialogsPropsType> = (props) => {\n    const dialogElements = props.dialogs.map((d: any) => <DialogItem key={d.id} id={d.id} name={d.name}/>)\n    const messagesElements = props.messages.map((m: any) => <Message key={m.id} message={m.message}/>)\n\n    const addNewMessage = (values: AddMessageFormValueType) => {\n        props.sendMessage(values.newMessageBody)\n    }\n\n    return (\n        <div className={styles.dialogs}>\n            <div className={styles.dialogsItems}>\n                {dialogElements}\n            </div>\n            <div className={styles.messages}>\n                <div>\n                    {messagesElements}\n                </div>\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\n            </div>\n        </div>\n    )\n}\n\n","import React from 'react'\nimport styles from './FormControls.module.css'\nimport {WrappedFieldMetaProps} from 'redux-form'\n\n\ntype FormControlPropsType = { meta: WrappedFieldMetaProps }\n\nconst FormControl: React.FC<FormControlPropsType> = (props) => {\n    const {meta, children} = props\n    const isError = meta.touched && meta.error\n    return (\n        <div className={isError ? `${styles.formControl} ${styles.error}` : ''}>\n            <div>{children}</div>\n            {isError && <span>{meta.error}</span>}\n        </div>\n    )\n}\n\nexport const Textarea = (props: any) => {\n    const {input, meta, ...restProps} = props\n    return (\n        <FormControl {...props}>\n            <textarea\n                cols={30}\n                rows={3}\n                {...input}\n                {...restProps}\n            />\n        </FormControl>\n    )\n}\n\nexport const Input = (props: any) => {\n    const {input, meta, ...restProps} = props\n    return (\n        <FormControl {...props}>\n            <input\n                {...input}\n                {...restProps}\n            />\n        </FormControl>\n    )\n}","import React from 'react';\nimport {Redirect} from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport {AppStateType} from '../redux/redux-store';\n\ntype MapStateToPropsType = { isAuth: boolean };\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        isAuth: state.auth.isAuth,\n    } as MapStateToPropsType;\n};\n\nexport function withRedirectToLogin<WCP>(WrappedComponent: React.ComponentType<WCP>) {\n    class RedirectComponent extends React.Component<MapStateToPropsType> {\n        render() {\n            const {isAuth, ...restProps} = this.props;\n            if (!isAuth) return <Redirect to=\"/login\"/>\n            return <WrappedComponent {...restProps as WCP}/>\n        }\n    }\n    return connect<MapStateToPropsType, {}, WCP, AppStateType>(mapStateToProps)(RedirectComponent);\n}","type FieldValidatorType = (value: string) => string | undefined\n\nexport const requiredField: FieldValidatorType = (value) => {\n    if (value) return undefined\n    return 'field is required'\n}\n\nconst maxLength = (max: number) => (value: string | any[]) =>\n    value && value.length > max ? `Must be ${max} characters or less` : undefined\nexport const maxLength30 = maxLength(30)\n\nconst minLength = (min: number) => (value: string | any[]) =>\n    value && value.length < min ? `Must be ${min} characters or more` : undefined\nexport const minLength2 = minLength(2)","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormControls_formControl__Bze--\",\"error\":\"FormControls_error__rGNdT\",\"formSummaryError\":\"FormControls_formSummaryError__zOU5q\"};"],"names":["DialogItem","props","to","id","name","Message","className","styles","message","AddMessageFormRedux","reduxForm","form","handleSubmit","onSubmit","Field","component","Textarea","validate","requiredField","maxLength30","minLength2","placeholder","cols","rows","compose","connect","state","dialogs","dialogsPage","messages","dialogsAction","withRedirectToLogin","dialogElements","map","d","messagesElements","m","values","sendMessage","newMessageBody","FormControl","meta","children","isError","touched","error","input","restProps","Input","mapStateToProps","isAuth","auth","WrappedComponent","RedirectComponent","this","React","max","min","value","length","undefined"],"sourceRoot":""}