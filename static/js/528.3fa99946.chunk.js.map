{"version":3,"file":"static/js/528.3fa99946.chunk.js","mappings":"2NACA,EAAmC,sC,qCCMtBA,EAAyB,SAACC,GACnC,OAAgCC,EAAAA,EAAAA,WAAkB,GAAlD,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAA4BF,EAAAA,EAAAA,UAAiBD,EAAMI,QAAnD,eAAOA,EAAP,KAAeC,EAAf,MAEAC,EAAAA,EAAAA,YAAU,kBAAMD,EAAUL,EAAMI,UAAS,CAACJ,IAE1C,IACMO,EAAqB,WACvBJ,GAAY,GACZH,EAAMQ,iBAAiBJ,IAI3B,OACI,yBACKF,GACK,0BAAK,kBACHO,WAAW,EACXC,MAAON,EACPO,SARO,SAACC,GAAD,OAAsCP,EAAUO,EAAEC,cAAcH,QASvEI,OAAQP,EACRQ,WAAY,SAACH,GAAD,MAAiB,UAAVA,EAAEI,KAAmBT,UAE1C,0BAAK,iBAAMU,cAjBA,kBAAMd,GAAY,IAiBxB,SAAwCC,GAAU,mBCjB5Dc,EAAc,SAAC,GAA+D,IAA9Dd,EAA6D,EAA7DA,OAAQe,EAAqD,EAArDA,QAASX,EAA4C,EAA5CA,iBAE1C,OAAKW,GAKD,0BACI,iBAAKC,UAAWC,EAAhB,WACI,gBACIC,MAAO,CAACC,OAAQ,SAChBC,IAAKC,EACLC,IAAI,gBACR,uBAAIP,EAAQQ,YACZ,uBAAIR,EAAQS,UACZ,SAAC7B,EAAD,CACIK,OAAQA,EACRI,iBAAkBA,UAdvB,SAACqB,EAAA,EAAD,K,kBCff,GAAgB,KAAO,oBCQVC,EAAO,SAAC9B,GACjB,OACI,iBAAKoB,UAAWC,EAAAA,MAAhB,WACI,iBACID,UAAWC,EAAAA,KADf,WAGI,gBACIG,IAAKC,EACLC,IAAI,gBAEP1B,EAAM+B,SACP,sCAAc/B,EAAMgC,kBAExB,yCCrBZ,EAA6B,4BAA7B,EAAiE,uB,sCC2B3DC,GAAsBC,EAAAA,EAAAA,GAAwB,CAACC,KAAM,kBAA/BD,EAlBL,SAAClC,GACpB,OACI,kBAAMoC,SAAUpC,EAAMqC,aAAtB,WACI,0BACI,SAACC,EAAA,EAAD,CACIC,KAAM,cACNC,UAAWC,EAAAA,EACXC,YAAa,qBACbC,SAAU,CAACC,EAAAA,GAAeC,EAAAA,GAAaC,EAAAA,SAG/C,0BACI,iDAQHC,EAAUC,EAAAA,MAAW,SAAChD,GAC/B,IAAMiD,GAAgB,OAAIjD,EAAMkD,OAC3BC,UACAC,KAAI,SAAAC,GAAC,OAAI,SAACvB,EAAD,CAAiBC,QAASsB,EAAEtB,QAASC,WAAYqB,EAAErB,YAAxCqB,EAAEC,OAG3B,OACI,iBAAKlC,UAAWC,EAAhB,WACI,sCACA,SAACY,EAAD,CAAqBG,SALX,SAACmB,GAAD,OAA0BvD,EAAMwD,QAAQD,EAAOE,iBAMzD,gBAAKrC,UAAWC,EAAhB,SACK4B,U,SCbJS,GAAmBC,EAAAA,EAAAA,KAfR,SAACC,GACrB,MAAO,CACHV,MAAOU,EAAMC,YAAYX,MACzB/B,QAASyC,EAAMC,YAAY1C,QAC3Bf,OAAQwD,EAAMC,YAAYzD,WAGP,SAAC0D,GACxB,MAAO,CACHN,QAAS,SAACC,GACNK,GAASC,EAAAA,EAAAA,IAAUN,QAKCE,CAA6CZ,GCjBhEiB,EAAU,SAAChE,GACpB,OACI,4BACI,SAACkB,EAAD,CACId,OAAQJ,EAAMI,OACde,QAASnB,EAAMmB,QACfX,iBAAkBR,EAAMQ,oBAE5B,SAACkD,EAAD,Q,8BCTNO,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,WAmBD,OAnBCA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,oBAAAA,MAEF,WACI,IAAIrC,EAASsC,KAAKlE,MAAMmE,MAAMC,OAAOxC,OAChCA,IACDA,EAASsC,KAAKlE,MAAM4B,SACPsC,KAAKlE,MAAMqE,QAAQC,KAAK,UAEzCJ,KAAKlE,MAAMuE,eAAe3C,GAC1BsC,KAAKlE,MAAMwE,cAAc5C,KAC5B,oBAED,WACI,OAAO,SAACoC,GAAD,kBACCE,KAAKlE,OADN,IAEHmB,QAAS+C,KAAKlE,MAAMmB,QACpBf,OAAQ8D,KAAKlE,MAAMI,OACnBI,iBAAkB0D,KAAKlE,MAAMQ,wBAEpC,EAnBCyD,CAAyBjB,EAAAA,WA+B/B,GAAeyB,EAAAA,EAAAA,KACXd,EAAAA,EAAAA,KAVoB,SAACC,GACrB,MAAO,CACHzC,QAASyC,EAAMC,YAAY1C,QAC3Bf,OAAQwD,EAAMC,YAAYzD,OAC1BwB,OAAQgC,EAAMc,KAAK9C,OACnB+C,OAAQf,EAAMc,KAAKC,UAKE,CAACJ,eAAAA,EAAAA,GAAgBC,cAAAA,EAAAA,GAAehE,iBAAAA,EAAAA,KACzDoE,EAAAA,GACAC,EAAAA,EAHJ,CAIEZ,I,uKC1CIa,EAAc,SAAC,GAA6C,IAAD,IAA3CC,KAAOC,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,MAAQC,EAAmB,EAAnBA,SACpCC,EAAUH,GAAWC,EAC3B,OACI,iBAAK7D,UAAW+D,EAAO,UAAM9D,EAAAA,EAAAA,YAAN,YAA4BA,EAAAA,EAAAA,OAAiB,GAApE,WACI,yBAAM6D,IACLC,IAAW,0BAAOF,QAKlBxC,EAAW,SAACzC,GACrB,IAAOoF,EAA6BpF,EAA7BoF,MAAgBC,GAAarF,EAAtB+E,MAAd,OAAoC/E,EAApC,IACA,OACI,SAAC8E,GAAD,kBAAiB9E,GAAjB,cACI,qCACIsF,KAAM,GACNC,KAAM,GACFH,GACAC,QAMPG,EAAQ,SAACxF,GAClB,IAAOoF,EAA6BpF,EAA7BoF,MAAgBC,GAAarF,EAAtB+E,MAAd,OAAoC/E,EAApC,IACA,OACI,SAAC8E,GAAD,kBAAiB9E,GAAjB,cACI,oCACQoF,GACAC,S,uKC3BdI,EAAkB,SAAC7B,GACrB,MAAO,CACHe,OAAQf,EAAMc,KAAKC,SAIpB,SAASE,EAAuBa,GAA8B,IAC3DC,EAD0D,0IAE5D,WACI,MAA+BzB,KAAKlE,MAA7B2E,EAAP,EAAOA,OAAWU,GAAlB,YACA,OAAKV,GACE,SAACe,GAAD,UAAeL,KADF,SAAC,KAAD,CAAUO,GAAG,eAJuB,GAChC5C,EAAAA,WAOhC,OAAOW,EAAAA,EAAAA,IAAQ8B,EAAR9B,CAAyBgC,K,qGCpB7B,IAKYE,EAIAC,EATNlD,EAAgB,SAAClC,GAC1B,IAAIA,EACJ,MAAO,qBAKEmC,GAFMgD,EAEkB,GAFF,SAACnF,GAAD,OAC/BA,GAASA,EAAMqF,OAASF,EAAxB,kBAAyCA,EAAzC,4BAAoEG,IAK3DlD,GAFMgD,EAEiB,EAFD,SAACpF,GAAD,OAC/BA,GAASA,EAAMqF,OAASD,EAAxB,kBAAyCA,EAAzC,4BAAoEE,K,mBCTxE,KAAgB,YAAc,kCAAkC,MAAQ,4BAA4B,iBAAmB,yC,wJCGxG,SAASC,EAAeC,EAAKC,GAC1C,OCLa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKC,GACjD,IAAIG,EAAY,MAAPJ,EAAc,KAAyB,qBAAXK,QAA0BL,EAAIK,OAAOC,WAAaN,EAAI,cAE3F,GAAU,MAANI,EAAJ,CACA,IAIIG,EAAIC,EAJJC,EAAO,GACPC,GAAK,EACLC,GAAK,EAIT,IACE,IAAKP,EAAKA,EAAGQ,KAAKZ,KAAQU,GAAMH,EAAKH,EAAGS,QAAQC,QAC9CL,EAAKrC,KAAKmC,EAAG/F,QAETyF,GAAKQ,EAAKZ,SAAWI,GAH4BS,GAAK,IAK5D,MAAOK,GACPJ,GAAK,EACLH,EAAKO,EACL,QACA,IACOL,GAAsB,MAAhBN,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIO,EAAI,MAAMH,GAIlB,OAAOC,GFtBuB,CAAqBT,EAAKC,KAAM,EAAAe,EAAA,GAA2BhB,EAAKC,IGLjF,WACb,MAAM,IAAIgB,UAAU,6IHIgF","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/common/FormControls/FormControls.tsx","hoc/WithRedirectToLogin.tsx","utilities/validators.ts","webpack://samurai-way/./src/components/common/FormControls/FormControls.module.css?7a3d","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__XBXuJ\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\n\ntype ProfileStatusPropsType = {\n    status: string\n    updateUserStatus: (status: string) => void\n}\n\nexport const ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\n    const [editMode, setEditMode] = useState<boolean>(false);\n    const [status, setStatus] = useState<string>(props.status);\n\n    useEffect(() => setStatus(props.status), [props]);\n\n    const activateEditMode = () => setEditMode(true);\n    const deactivateEditMode = () => {\n        setEditMode(false);\n        props.updateUserStatus(status);\n    };\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => setStatus(e.currentTarget.value);\n\n    return (\n        <div>\n            {editMode\n                ? <div><input\n                    autoFocus={true}\n                    value={status}\n                    onChange={onStatusChange}\n                    onBlur={deactivateEditMode}\n                    onKeyPress={(e) => e.key === 'Enter' && deactivateEditMode()}\n                /></div>\n                : <div><span onDoubleClick={activateEditMode}>{status || 'NO STATUS'}</span></div>\n            }\n        </div>\n    );\n};\n\n","import React from 'react';\nimport styles from './ProfileInfo.module.css';\nimport {Preloader} from '../../common/Preloader/Preloader';\nimport userAvatar2 from '../../../assets/userAvatar2.png';\nimport {ProfileStatusWithHooks} from './ProfileStatusWithHooks';\nimport {ProfileResponseType} from '../../../redux/profile-reducer';\n\ntype ProfileInfoPropsType = {\n    status: string\n    profile: ProfileResponseType,\n    updateUserStatus: (status: string) => void,\n}\n\nexport const ProfileInfo = ({status, profile, updateUserStatus}: ProfileInfoPropsType) => {\n\n    if (!profile) {\n        return <Preloader/>;\n    }\n\n    return (\n        <div>\n            <div className={styles.descriptionBlock}>\n                <img\n                    style={{height: '200px'}}\n                    src={userAvatar2}\n                    alt=\"userAvatar\"/>\n                <p>{profile.fullName}</p>\n                <p>{profile.userId}</p>\n                <ProfileStatusWithHooks\n                    status={status}\n                    updateUserStatus={updateUserStatus}\n                />\n            </div>\n        </div>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__Yu4oG\"};","import React from 'react';\nimport styles from './Post.module.css';\nimport userAvatar2 from '../../../../assets/userAvatar2.png';\n\ntype PostPropsType = {\n    message: string\n    likesCount: number\n}\n\nexport const Post = (props: PostPropsType) => {\n    return (\n        <div className={styles.posts}>\n            <div\n                className={styles.item}\n            >\n                <img\n                    src={userAvatar2}\n                    alt=\"usersAvatar\"\n                />\n                {props.message}\n                <div>#likes: {props.likesCount}</div>\n            </div>\n            <button>LIKE</button>\n        </div>\n    );\n};","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__lB-pf\",\"posts\":\"MyPosts_posts__GSiZ2\"};","import React from 'react';\nimport {Post} from './Post/Post';\nimport styles from './MyPosts.module.css';\nimport {MyPostsPropsType} from './MyPostsContainer';\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\nimport {maxLength30, minLength2, requiredField} from '../../../utilities/validators';\nimport {Textarea} from '../../common/FormControls/FormControls';\n\ntype FormDataType = { newPostText: string };\n\nconst AddNewPostForm = (props: InjectedFormProps<FormDataType>) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field\n                    name={'newPostText'}\n                    component={Textarea}\n                    placeholder={'add your post here'}\n                    validate={[requiredField, maxLength30, minLength2]}\n                />\n            </div>\n            <div>\n                <button>Add post</button>\n            </div>\n        </form>\n    );\n};\n\nconst AddNewPostFormRedux = reduxForm<FormDataType>({form: 'addNewPostForm'})(AddNewPostForm);\n\nexport const MyPosts = React.memo((props: MyPostsPropsType) => {\n    const postsElements = [...props.posts]\n        .reverse()\n        .map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>);\n    const onAddPost = (values: FormDataType) => props.addPost(values.newPostText);\n\n    return (\n        <div className={styles.postsBlock}>\n            <h3>My posts</h3>\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\n            <div className={styles.posts}>\n                {postsElements}\n            </div>\n        </div>\n    );\n});","import React from 'react';\nimport {addPostAC, ProfilePageType, ProfileReducerActionsType} from '../../../redux/profile-reducer';\nimport {MyPosts} from './MyPosts';\nimport {connect} from 'react-redux';\nimport {AppStateType} from '../../../redux/redux-store';\nimport {Dispatch} from 'redux';\n\ntype MapDispatchToPropsType = {\n    addPost: (newPostText: string) => void\n};\n\nexport type MyPostsPropsType = ProfilePageType & MapDispatchToPropsType;\n\nconst mapStateToProps = (state: AppStateType): ProfilePageType => {\n    return {\n        posts: state.profilePage.posts,\n        profile: state.profilePage.profile,\n        status: state.profilePage.status\n    };\n};\nconst mapDispatchToProps = (dispatch: Dispatch<ProfileReducerActionsType>): MapDispatchToPropsType => {\n    return {\n        addPost: (newPostText: string) => {\n            dispatch(addPostAC(newPostText))\n        }\n    };\n};\n\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);","import React from 'react';\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo';\nimport {MyPostsContainer} from './MyPosts/MyPostsContainer';\nimport {ProfileResponseType} from '../../redux/profile-reducer';\n\ntype ProfilePropsType = {\n    status: string\n    profile: ProfileResponseType,\n    updateUserStatus: (status: string) => void,\n}\n\nexport const Profile = (props: ProfilePropsType) => {\n    return (\n        <div>\n            <ProfileInfo\n                status={props.status}\n                profile={props.profile}\n                updateUserStatus={props.updateUserStatus}\n            />\n            <MyPostsContainer/>\n        </div>\n    );\n};","import React from 'react';\nimport {Profile} from './Profile';\nimport {connect} from 'react-redux';\nimport {getUserProfile, getUserStatus, ProfileResponseType, updateUserStatus} from '../../redux/profile-reducer';\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\nimport {AppStateType} from '../../redux/redux-store';\nimport {withRedirectToLogin} from '../../hoc/WithRedirectToLogin';\nimport {compose} from 'redux';\n\n\nclass ProfileContainer extends React.Component<ProfileContainerPropsType> {\n\n    componentDidMount() {\n        let userId = this.props.match.params.userId;\n        if (!userId) {\n            userId = this.props.userId;\n            if (!userId) this.props.history.push('/login');\n        }\n        this.props.getUserProfile(userId);\n        this.props.getUserStatus(userId);\n    }\n\n    render() {\n        return <Profile\n            {...this.props}\n            profile={this.props.profile}\n            status={this.props.status}\n            updateUserStatus={this.props.updateUserStatus}\n        />;\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        userId: state.auth.userId,\n        isAuth: state.auth.isAuth\n    } as MapStateToPropsType\n};\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {getUserProfile, getUserStatus, updateUserStatus} as MapDispatchToPropsType),\n    withRouter,\n    withRedirectToLogin\n)(ProfileContainer);\n\ntype PathParamsType = { userId: string };\ntype MapDispatchToPropsType = {\n    getUserProfile: (id: string) => void\n    getUserStatus: (id: string) => void\n    updateUserStatus: (status: string) => void\n};\ntype MapStateToPropsType = {\n    profile: ProfileResponseType\n    status: string\n    userId: string\n    isAuth: boolean\n};\ntype ProfileContainerPropsType =\n    MapStateToPropsType\n    & MapDispatchToPropsType\n    & RouteComponentProps<PathParamsType>;\n\n","import React from 'react';\nimport styles from './FormControls.module.css';\n\nconst FormControl = ({meta: {touched, error}, children}: any) => {\n    const isError = touched && error;\n    return (\n        <div className={isError ? `${styles.formControl} ${styles.error}` : ''}>\n            <div>{children}</div>\n            {isError && <span>{error}</span>}\n        </div>\n    );\n};\n\nexport const Textarea = (props: any) => {\n    const {input, meta, ...restProps} = props;\n    return (\n        <FormControl {...props}>\n            <textarea\n                cols={30}\n                rows={3}\n                {...input}\n                {...restProps}\n            />\n        </FormControl>\n    );\n};\n\nexport const Input = (props: any) => {\n    const {input, meta, ...restProps} = props;\n    return (\n        <FormControl {...props}>\n            <input\n                {...input}\n                {...restProps}\n            />\n        </FormControl>\n    );\n};","import React, {ComponentType} from 'react';\nimport {Redirect} from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport {AppStateType} from '../redux/redux-store';\n\ntype MapStateToPropsType = { isAuth: boolean };\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        isAuth: state.auth.isAuth,\n    } as MapStateToPropsType;\n};\n\nexport function withRedirectToLogin<T>(Component: ComponentType<T>) {\n    class RedirectComponent extends React.Component<MapStateToPropsType> {\n        render() {\n            const {isAuth, ...restProps} = this.props;\n            if (!isAuth) return <Redirect to=\"/login\"/>\n            return <Component {...restProps as T}/>\n        }\n    }\n    return connect(mapStateToProps)(RedirectComponent);\n}","export const requiredField = (value: any) => {\n    if (value) return undefined;\n    return 'field is required';\n};\n\nconst maxLength = (max: number) => (value: string | any[]) =>\n    value && value.length > max ? `Must be ${max} characters or less` : undefined\nexport const maxLength30 = maxLength(30)\n\nconst minLength = (min: number) => (value: string | any[]) =>\n    value && value.length < min ? `Must be ${min} characters or more` : undefined\nexport const minLength2 = minLength(2)","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormControls_formControl__Bze--\",\"error\":\"FormControls_error__rGNdT\",\"formSummaryError\":\"FormControls_formSummaryError__zOU5q\"};","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","deactivateEditMode","updateUserStatus","autoFocus","value","onChange","e","currentTarget","onBlur","onKeyPress","key","onDoubleClick","ProfileInfo","profile","className","styles","style","height","src","userAvatar2","alt","fullName","userId","Preloader","Post","message","likesCount","AddNewPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","name","component","Textarea","placeholder","validate","requiredField","maxLength30","minLength2","MyPosts","React","postsElements","posts","reverse","map","p","id","values","addPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","addPostAC","Profile","ProfileContainer","this","match","params","history","push","getUserProfile","getUserStatus","compose","auth","isAuth","withRouter","withRedirectToLogin","FormControl","meta","touched","error","children","isError","input","restProps","cols","rows","Input","mapStateToProps","Component","RedirectComponent","to","max","min","length","undefined","_slicedToArray","arr","i","Array","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","err","unsupportedIterableToArray","TypeError"],"sourceRoot":""}