{"version":3,"file":"static/js/269.5ef39642.chunk.js","mappings":"sSAmDMA,GAAiBC,EAAAA,EAAAA,GAAwB,CAACC,KAAM,SAA/BD,EAnCL,SAAC,GAA4D,IAA3DE,EAA0D,EAA1DA,aAAcC,EAA4C,EAA5CA,MAC9B,OACI,kBAAMC,SAAUF,EAAhB,WACI,0BACI,SAACG,EAAA,EAAD,CACIC,KAAM,QACNC,YAAa,QACbC,UAAWC,EAAAA,EACXC,SAAU,CAACC,EAAAA,SAGnB,0BACI,SAACN,EAAA,EAAD,CACIC,KAAM,WACNC,YAAa,WACbC,UAAWC,EAAAA,EACXC,SAAU,CAACC,EAAAA,IACXC,KAAM,gBAGd,4BACI,SAACP,EAAA,EAAD,CACIC,KAAM,aACNE,UAAWC,EAAAA,EACXG,KAAM,aAJd,iBAOCT,IAAS,gBAAKU,UAAWC,EAAAA,EAAAA,iBAAhB,SAA0CX,KACpD,0BACI,+CA8BhB,GAAeY,EAAAA,EAAAA,KADS,SAACC,GAAD,MAA0B,CAACC,OAAQD,EAAME,KAAKD,UAC9B,CAACE,MAAAA,EAAAA,GAAOC,OAAAA,EAAAA,IAAhD,EAtBc,SAACC,GAMX,OAAIA,EAAMJ,QAAe,SAAC,KAAD,CAAUK,GAAI,cAGnC,4BACI,mCACA,SAACvB,EAAD,CAAgBK,SAVP,SAACmB,GACd,IAAOC,EAA+BD,EAA/BC,MAAOC,EAAwBF,EAAxBE,SAAUC,EAAcH,EAAdG,WACxBL,EAAMF,MAAMK,EAAOC,EAAUC,YCrD/BC,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,WAGD,OAHCA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,SAAAA,MACF,WACI,OAAO,SAAC,EAAD,QACV,EAHCA,CAAuBC,EAAAA,WAM7B,K,uKCNMC,EAAc,SAAC,GAA6C,IAAD,IAA3CC,KAAOC,EAAoC,EAApCA,QAAS5B,EAA2B,EAA3BA,MAAQ6B,EAAmB,EAAnBA,SACpCC,EAAUF,GAAW5B,EAC3B,OACI,iBAAKU,UAAWoB,EAAO,UAAMnB,EAAAA,EAAAA,YAAN,YAA4BA,EAAAA,EAAAA,OAAiB,GAApE,WACI,yBAAMkB,IACLC,IAAW,0BAAO9B,QAKlB+B,EAAW,SAACb,GACrB,IAAOc,EAA6Bd,EAA7Bc,MAAgBC,GAAaf,EAAtBS,MAAd,OAAoCT,EAApC,IACA,OACI,SAACQ,GAAD,kBAAiBR,GAAjB,cACI,qCACIgB,KAAM,GACNC,KAAM,GACFH,GACAC,QAMP3B,EAAQ,SAACY,GAClB,IAAOc,EAA6Bd,EAA7Bc,MAAgBC,GAAaf,EAAtBS,MAAd,OAAoCT,EAApC,IACA,OACI,SAACQ,GAAD,kBAAiBR,GAAjB,cACI,oCACQc,GACAC,S,qGCjCb,IAKYG,EAIAC,EATN7B,EAAgB,SAAC8B,GAC1B,IAAIA,EACJ,MAAO,qBAKEC,GAFMH,EAEkB,GAFF,SAACE,GAAD,OAC/BA,GAASA,EAAME,OAASJ,EAAxB,kBAAyCA,EAAzC,4BAAoEK,IAK3DC,GAFML,EAEiB,EAFD,SAACC,GAAD,OAC/BA,GAASA,EAAME,OAASH,EAAxB,kBAAyCA,EAAzC,4BAAoEI,K,mBCTxE,KAAgB,YAAc,kCAAkC,MAAQ,4BAA4B,iBAAmB","sources":["components/Login/Login.tsx","components/Login/LoginContainer.tsx","components/common/FormControls/FormControls.tsx","utilities/validators.ts","webpack://samurai-way/./src/components/common/FormControls/FormControls.module.css?7a3d"],"sourcesContent":["import React from 'react';\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\nimport {Input} from '../common/FormControls/FormControls';\nimport {requiredField} from '../../utilities/validators';\nimport {connect} from 'react-redux';\nimport {login, logout} from '../../redux/auth-reducer';\nimport {AppStateType} from '../../redux/redux-store';\nimport {Redirect} from 'react-router-dom';\nimport styles from '../common/FormControls/FormControls.module.css';\n\ntype FormDataType = {\n    email: string\n    password: string\n    rememberMe: boolean\n}\n\nconst LoginForm = ({handleSubmit, error}: InjectedFormProps<FormDataType>) => {\n    return (\n        <form onSubmit={handleSubmit}>\n            <div>\n                <Field\n                    name={'email'}\n                    placeholder={'Email'}\n                    component={Input}\n                    validate={[requiredField]}\n                />\n            </div>\n            <div>\n                <Field\n                    name={'password'}\n                    placeholder={'Password'}\n                    component={Input}\n                    validate={[requiredField]}\n                    type={'password'}\n                />\n            </div>\n            <div>\n                <Field\n                    name={'rememberMe'}\n                    component={Input}\n                    type={'checkbox'}\n                />remember me\n            </div>\n            {error && <div className={styles.formSummaryError}>{error}</div>}\n            <div>\n                <button>Log IN</button>\n            </div>\n        </form>\n    );\n};\n\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm);\n\nconst Login = (props: mDTPType & mSTPType) => {\n    const onSubmit = (formData: FormDataType) => {\n        const {email, password, rememberMe} = formData;\n        props.login(email, password, rememberMe);\n    };\n\n    if (props.isAuth) return <Redirect to={'/profile'}/>;\n\n    return (\n        <div>\n            <h1>LOGIN</h1>\n            <LoginReduxForm onSubmit={onSubmit}/>\n        </div>\n    );\n};\n\ntype mDTPType = {\n    login: (email: string, password: string, rememberMe: boolean) => void\n    logout: () => void\n}\ntype mSTPType = { isAuth: boolean }\nconst mapStateToProps = (state: AppStateType) => ({isAuth: state.auth.isAuth} as mSTPType);\nexport default connect(mapStateToProps, {login, logout} as mDTPType)(Login);","import React from 'react';\nimport Login from './Login';\n\nclass LoginContainer extends React.Component<any, any>{\n    render() {\n        return <Login/>\n    }\n}\n\nexport default LoginContainer;","import React from 'react';\nimport styles from './FormControls.module.css';\n\nconst FormControl = ({meta: {touched, error}, children}: any) => {\n    const isError = touched && error;\n    return (\n        <div className={isError ? `${styles.formControl} ${styles.error}` : ''}>\n            <div>{children}</div>\n            {isError && <span>{error}</span>}\n        </div>\n    );\n};\n\nexport const Textarea = (props: any) => {\n    const {input, meta, ...restProps} = props;\n    return (\n        <FormControl {...props}>\n            <textarea\n                cols={30}\n                rows={3}\n                {...input}\n                {...restProps}\n            />\n        </FormControl>\n    );\n};\n\nexport const Input = (props: any) => {\n    const {input, meta, ...restProps} = props;\n    return (\n        <FormControl {...props}>\n            <input\n                {...input}\n                {...restProps}\n            />\n        </FormControl>\n    );\n};","export const requiredField = (value: any) => {\n    if (value) return undefined;\n    return 'field is required';\n};\n\nconst maxLength = (max: number) => (value: string | any[]) =>\n    value && value.length > max ? `Must be ${max} characters or less` : undefined\nexport const maxLength30 = maxLength(30)\n\nconst minLength = (min: number) => (value: string | any[]) =>\n    value && value.length < min ? `Must be ${min} characters or more` : undefined\nexport const minLength2 = minLength(2)","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormControls_formControl__Bze--\",\"error\":\"FormControls_error__rGNdT\",\"formSummaryError\":\"FormControls_formSummaryError__zOU5q\"};"],"names":["LoginReduxForm","reduxForm","form","handleSubmit","error","onSubmit","Field","name","placeholder","component","Input","validate","requiredField","type","className","styles","connect","state","isAuth","auth","login","logout","props","to","formData","email","password","rememberMe","LoginContainer","React","FormControl","meta","touched","children","isError","Textarea","input","restProps","cols","rows","max","min","value","maxLength30","length","undefined","minLength2"],"sourceRoot":""}