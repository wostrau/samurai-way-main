{"version":3,"file":"static/js/278.97bd8bbd.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/Contact.tsx","components/Profile/ProfileInfo/ProfileData.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","components/Profile/MyPosts/AddPostForm/AddNewPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/common/FormControls/FormControls.tsx","hoc/WithRedirectToLogin.tsx","utilities/validators.ts","webpack://samurai-way/./src/components/common/FormControls/FormControls.module.css?7a3d","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__XBXuJ\",\"mainPhoto\":\"ProfileInfo_mainPhoto__QU8TO\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\n\ntype ProfileStatusPropsType = {\n    status: string\n    updateUserStatus: (status: string) => void\n}\n\nexport const ProfileStatusWithHooks: React.FC<ProfileStatusPropsType> = (props) => {\n    const [editMode, setEditMode] = useState<boolean>(false);\n    const [status, setStatus] = useState<string>(props.status);\n\n    useEffect(() => setStatus(props.status), [props]);\n\n    const activateEditMode = () => setEditMode(true);\n    const deactivateEditMode = () => {\n        setEditMode(false);\n        props.updateUserStatus(status);\n    };\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => setStatus(e.currentTarget.value);\n\n    return (\n        <div>\n            {editMode\n                ? <div><input\n                    autoFocus={true}\n                    value={status}\n                    onChange={onStatusChange}\n                    onBlur={deactivateEditMode}\n                    onKeyPress={(e) => e.key === 'Enter' && deactivateEditMode()}\n                /></div>\n                : <div>\n                    <b>Status: </b><span onDoubleClick={activateEditMode}>{status || 'NO STATUS'}</span>\n                </div>\n            }\n        </div>\n    );\n};\n","import React from 'react';\nimport {ProfileResponseType} from '../../../api/profile-api'\n\nexport type ProfileContacts = keyof ProfileResponseType['contacts'];\n\nexport const Contact: React.FC<{ contactTitle: ProfileContacts, contactValue: string }> = ({ contactTitle, contactValue }) => {\n    return (\n        <div style={{paddingLeft: '10px'}}>\n            <b>{contactTitle}: </b>{contactValue}\n        </div>\n    );\n};\n","import React from 'react'\nimport {Contact, ProfileContacts} from './Contact'\nimport {ProfileResponseType} from '../../../api/profile-api'\nimport {ContactsType} from '../../../types/types'\n\ntype ProfileDataPropsType = {\n    profile: ProfileResponseType\n    isOwner: boolean\n    activateEditMode: () => void\n}\n\nexport const ProfileData = (props: ProfileDataPropsType) => {\n    const {isOwner, profile, activateEditMode} = props\n    return (\n        <div>\n            {isOwner && <div>\n                <button onClick={activateEditMode}>edit profile</button>\n            </div>}\n            <div><b>fullName: </b>{profile.fullName}</div>\n            <div><b>ID: </b>{profile.userId}</div>\n            <div><b>About me: </b>{profile.aboutMe}</div>\n            <div><b>Open to work: </b>{profile.lookingForAJob ? 'yes' : 'not at the moment'}</div>\n            {profile.lookingForAJob && <div><b>profSkills: </b>{profile.lookingForAJobDescription}</div>}\n            {profile.contacts && Object.keys(profile.contacts).map((key) => {\n                return <Contact\n                    key={key}\n                    contactTitle={key as keyof ContactsType}\n                    contactValue={profile.contacts[key as keyof ContactsType]}\n                />\n            })}\n        </div>\n    )\n}","import React from 'react';\nimport {Input, Textarea} from '../../common/FormControls/FormControls';\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\nimport styles from '../../common/FormControls/FormControls.module.css';\nimport {ContactsType} from '../../../types/types'\n\n\nexport type ProfileDataFormType = {\n    fullName: string\n    aboutMe: string\n    lookingForAJob: boolean\n    lookingForAJobDescription: string\n};\ntype ContactsPropsType = { contacts: ContactsType }\n\n\nconst ProfileDataForm = (props: InjectedFormProps<ProfileDataFormType, ContactsPropsType> & ContactsPropsType) => {\n    const {handleSubmit, contacts, error} = props;\n    return (\n        <form onSubmit={handleSubmit}>\n            <div><button>save</button></div>\n            {error && <div className={styles.formSummaryError}>{error}</div>}\n            <div>\n                <b>Full name</b>\n                <Field\n                    name={'fullName'}\n                    placeholder={'Full name'}\n                    component={Input}\n                    validate={[]}\n                />\n            </div>\n            <div>\n                <b>About me</b>\n                <Field\n                    name={'aboutMe'}\n                    placeholder={'About me'}\n                    component={Textarea}\n                    validate={[]}\n                />\n            </div>\n            <div>\n                <b>Looking for a job</b>\n                <Field\n                    name={'lookingForAJob'}\n                    component={Input}\n                    type={'checkbox'}\n                />\n            </div>\n            <div>\n                <b>Skills</b>\n                <Field\n                    name={'lookingForAJobDescription'}\n                    placeholder={'Professional skills'}\n                    component={Textarea}\n                    validate={[]}\n                />\n            </div>\n            <div>\n                <b>Contacts</b>\n                {contacts && Object.entries(contacts).map(([key]) => {\n                    return (\n                        <div key={key} style={{paddingLeft: '10px'}}>\n                            <b>{key}: </b>\n                            <Field\n                                name={`contacts.${key}`}\n                                placeholder={`${key} url`}\n                                component={Input}\n                            />\n                        </div>\n                    );\n                })\n                }\n            </div>\n        </form>\n    )\n        ;\n};\n\nconst ProfileDataReduxForm = reduxForm<ProfileDataFormType, ContactsPropsType>({form: 'edit-profile'})(ProfileDataForm);\n\nexport default ProfileDataReduxForm;","import React, {ChangeEvent, useState} from 'react'\nimport styles from './ProfileInfo.module.css'\nimport {Preloader} from '../../common/Preloader/Preloader'\nimport userAvatar2 from '../../../assets/userAvatar2.png'\nimport {ProfileStatusWithHooks} from './ProfileStatusWithHooks'\nimport {ProfileData} from './ProfileData'\nimport ProfileDataReduxForm, {ProfileDataFormType} from './ProfileDataForm'\nimport {ProfileResponseType} from '../../../api/profile-api'\n\n\ntype ProfileInfoPropsType = {\n    isOwner: boolean\n    status: string\n    profile: ProfileResponseType\n    updateUserStatus: (status: string) => void\n    savePhoto: (photo: File) => void\n    saveProfile: (profile: ProfileResponseType) => Promise<void>\n}\n\nexport const ProfileInfo = (props: ProfileInfoPropsType) => {\n    const {isOwner, status, profile, updateUserStatus, savePhoto, saveProfile} = props\n    const [editMode, setEditMode] = useState<boolean>(false)\n\n    if (!profile) return <Preloader/>\n\n    const onProfilePhotoSelect = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.currentTarget.files && e.currentTarget.files.length) savePhoto(e.currentTarget.files[0])\n    }\n\n    const onSubmit = (formData: ProfileDataFormType) => {\n        const updatedProfile = {...profile, ...formData}\n        saveProfile(updatedProfile).then(() => setEditMode(false))\n    }\n\n    return (\n        <div>\n            <div className={styles.descriptionBlock}>\n                <img\n                    className={styles.mainPhoto}\n                    style={{height: '200px'}}\n                    src={profile && profile.photos && profile.photos.large ? profile.photos.large : userAvatar2}\n                    alt=\"userAvatar\"/>\n                {isOwner && <input type={'file'} onChange={onProfilePhotoSelect}/>}\n                {editMode\n                    ? <ProfileDataReduxForm\n                        initialValues={profile}\n                        onSubmit={onSubmit}\n                        contacts={profile.contacts}\n                    />\n                    : <ProfileData\n                        profile={profile}\n                        isOwner={isOwner}\n                        activateEditMode={() => setEditMode(true)}\n                    />}\n                <ProfileStatusWithHooks\n                    status={status}\n                    updateUserStatus={updateUserStatus}\n                />\n            </div>\n        </div>\n    )\n}\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__Yu4oG\"};","import React from 'react'\nimport styles from './Post.module.css'\nimport userAvatar2 from '../../../../assets/userAvatar2.png'\n\ntype PostPropsType = {\n    message: string\n    likesCount: number\n}\n\nexport const Post: React.FC<PostPropsType> = (props) => {\n    return (\n        <div className={styles.posts}>\n            <div\n                className={styles.item}\n            >\n                <img\n                    src={userAvatar2}\n                    alt=\"usersAvatar\"\n                />\n                {props.message}\n                <div>#likes: {props.likesCount}</div>\n            </div>\n            <button>LIKE</button>\n        </div>\n    )\n}","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__lB-pf\",\"posts\":\"MyPosts_posts__GSiZ2\"};","import {Field, InjectedFormProps, reduxForm} from 'redux-form'\nimport {Textarea} from '../../../common/FormControls/FormControls'\nimport {maxLength30, minLength2, requiredField} from '../../../../utilities/validators'\nimport React from 'react'\n\n\nexport type FormDataType = { newPostText: string }\n\nconst AddNewPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field\n                    name={'newPostText'}\n                    component={Textarea}\n                    placeholder={'add your post here'}\n                    validate={[requiredField, maxLength30, minLength2]}\n                />\n            </div>\n            <div>\n                <button>Add post</button>\n            </div>\n        </form>\n    )\n}\n\nexport default reduxForm<FormDataType>({form: 'addNewPostForm'})(AddNewPostForm)","import React from 'react'\nimport {Post} from './Post/Post'\nimport styles from './MyPosts.module.css'\nimport AddNewPostForm, {FormDataType} from './AddPostForm/AddNewPostForm'\nimport {ProfileStateType} from '../../../redux/profile-reducer'\nimport {MapDispatchToPropsType} from './MyPostsContainer';\n\n\ntype MyPostsPropsType = ProfileStateType & MapDispatchToPropsType;\n\nexport const MyPosts = React.memo((props: MyPostsPropsType) => {\n    const postsElements = [...props.posts]\n        .reverse()\n        .map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>)\n    const onAddPost = (values: FormDataType) => props.addPost(values.newPostText)\n\n    return (\n        <div className={styles.postsBlock}>\n            <h3>My posts</h3>\n            <AddNewPostForm onSubmit={onAddPost}/>\n            <div className={styles.posts}>\n                {postsElements}\n            </div>\n        </div>\n    )\n})","import React from 'react'\nimport {ProfileStateType, ProfileReducerActionsType, profileAction} from '../../../redux/profile-reducer'\nimport {MyPosts} from './MyPosts'\nimport {connect} from 'react-redux'\nimport {AppStateType} from '../../../redux/redux-store'\nimport {Dispatch} from 'redux'\n\nexport type MapDispatchToPropsType = {\n    addPost: (newPostText: string) => void\n}\n\nconst mapStateToProps = (state: AppStateType): ProfileStateType => {\n    return {\n        posts: state.profilePage.posts,\n        profile: state.profilePage.profile,\n        status: state.profilePage.status\n    }\n}\nconst mapDispatchToProps = (dispatch: Dispatch<ProfileReducerActionsType>): MapDispatchToPropsType => {\n    return {\n        addPost: (newPostText: string) => {\n            dispatch(profileAction.addPost(newPostText))\n        }\n    }\n}\n\nexport const MyPostsContainer = connect<ProfileStateType, MapDispatchToPropsType, {}, AppStateType>(\n    mapStateToProps,\n    mapDispatchToProps\n)(MyPosts)","import React from 'react';\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo';\nimport {MyPostsContainer} from './MyPosts/MyPostsContainer';\nimport {ProfileResponseType} from '../../api/profile-api'\n\ntype ProfilePropsType = {\n    isOwner: boolean\n    status: string\n    profile: ProfileResponseType,\n    updateUserStatus: (status: string) => void\n    savePhoto: (photo: File) => void\n    saveProfile: (profile: ProfileResponseType) => Promise<void>\n}\n\nexport const Profile = (props: ProfilePropsType) => {\n    return (\n        <div>\n            <ProfileInfo\n                isOwner={props.isOwner}\n                status={props.status}\n                profile={props.profile}\n                updateUserStatus={props.updateUserStatus}\n                savePhoto={props.savePhoto}\n                saveProfile={props.saveProfile}\n            />\n            <MyPostsContainer/>\n        </div>\n    );\n};","import React from 'react'\nimport {Profile} from './Profile'\nimport {connect} from 'react-redux'\nimport {\n    getUserProfile,\n    getUserStatus,\n    savePhoto,\n    saveProfile,\n    updateUserStatus\n} from '../../redux/profile-reducer'\nimport {RouteComponentProps, withRouter} from 'react-router-dom'\nimport {AppStateType} from '../../redux/redux-store'\nimport {withRedirectToLogin} from '../../hoc/WithRedirectToLogin'\nimport {compose} from 'redux'\nimport {ProfileResponseType} from '../../api/profile-api'\n\n\nclass ProfileContainer extends React.Component<ProfileContainerPropsType> {\n\n    mountProfile() {\n        let userId: number | null = Number(this.props.match.params.userId)\n        if (!userId) {\n            userId = this.props.userId\n            if (!userId) this.props.history.push('/login')\n        }\n        this.props.getUserProfile(userId)\n        this.props.getUserStatus(userId)\n    }\n\n    componentDidMount() {\n        this.mountProfile()\n    }\n\n    componentDidUpdate(prevProps: Readonly<ProfileContainerPropsType>) {\n        if (this.props.match.params.userId !== prevProps.match.params.userId) this.mountProfile()\n    }\n\n    render() {\n        return <Profile\n            {...this.props}\n            isOwner={!this.props.match.params.userId}\n            profile={this.props.profile}\n            status={this.props.status}\n            updateUserStatus={this.props.updateUserStatus}\n            savePhoto={this.props.savePhoto}\n            saveProfile={this.props.saveProfile}\n        />\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        userId: state.auth.userId,\n        isAuth: state.auth.isAuth\n    } as MapStateToPropsType\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {\n        getUserProfile,\n        getUserStatus,\n        updateUserStatus,\n        savePhoto,\n        saveProfile\n    } as unknown as MapDispatchToPropsType),\n    withRouter,\n    withRedirectToLogin\n)(ProfileContainer)\n\n\ntype MapDispatchToPropsType = {\n    getUserProfile: (id: number) => void\n    getUserStatus: (id: number) => void\n    updateUserStatus: (status: string) => void\n    savePhoto: (photo: File) => void\n    saveProfile: (profile: ProfileResponseType) => Promise<void>\n};\ntype MapStateToPropsType = {\n    profile: ProfileResponseType\n    status: string\n    userId: number\n    isAuth: boolean\n};\ntype ProfileContainerPropsType =\n    MapStateToPropsType\n    & MapDispatchToPropsType\n    & RouteComponentProps<{ userId: string }>;\n\n","import React from 'react'\nimport styles from './FormControls.module.css'\nimport {WrappedFieldMetaProps} from 'redux-form'\n\n\ntype FormControlPropsType = { meta: WrappedFieldMetaProps }\n\nconst FormControl: React.FC<FormControlPropsType> = (props) => {\n    const {meta, children} = props\n    const isError = meta.touched && meta.error\n    return (\n        <div className={isError ? `${styles.formControl} ${styles.error}` : ''}>\n            <div>{children}</div>\n            {isError && <span>{meta.error}</span>}\n        </div>\n    )\n}\n\nexport const Textarea = (props: any) => {\n    const {input, meta, ...restProps} = props\n    return (\n        <FormControl {...props}>\n            <textarea\n                cols={30}\n                rows={3}\n                {...input}\n                {...restProps}\n            />\n        </FormControl>\n    )\n}\n\nexport const Input = (props: any) => {\n    const {input, meta, ...restProps} = props\n    return (\n        <FormControl {...props}>\n            <input\n                {...input}\n                {...restProps}\n            />\n        </FormControl>\n    )\n}","import React from 'react';\nimport {Redirect} from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport {AppStateType} from '../redux/redux-store';\n\ntype MapStateToPropsType = { isAuth: boolean };\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        isAuth: state.auth.isAuth,\n    } as MapStateToPropsType;\n};\n\nexport function withRedirectToLogin<WCP>(WrappedComponent: React.ComponentType<WCP>) {\n    class RedirectComponent extends React.Component<MapStateToPropsType> {\n        render() {\n            const {isAuth, ...restProps} = this.props;\n            if (!isAuth) return <Redirect to=\"/login\"/>\n            return <WrappedComponent {...restProps as WCP}/>\n        }\n    }\n    return connect<MapStateToPropsType, {}, WCP, AppStateType>(mapStateToProps)(RedirectComponent);\n}","type FieldValidatorType = (value: string) => string | undefined\n\nexport const requiredField: FieldValidatorType = (value) => {\n    if (value) return undefined\n    return 'field is required'\n}\n\nconst maxLength = (max: number) => (value: string | any[]) =>\n    value && value.length > max ? `Must be ${max} characters or less` : undefined\nexport const maxLength30 = maxLength(30)\n\nconst minLength = (min: number) => (value: string | any[]) =>\n    value && value.length < min ? `Must be ${min} characters or more` : undefined\nexport const minLength2 = minLength(2)","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormControls_formControl__Bze--\",\"error\":\"FormControls_error__rGNdT\",\"formSummaryError\":\"FormControls_formSummaryError__zOU5q\"};","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","deactivateEditMode","updateUserStatus","autoFocus","value","onChange","e","currentTarget","onBlur","onKeyPress","key","onDoubleClick","Contact","contactTitle","contactValue","style","paddingLeft","ProfileData","isOwner","profile","activateEditMode","onClick","fullName","userId","aboutMe","lookingForAJob","lookingForAJobDescription","contacts","Object","keys","map","reduxForm","form","handleSubmit","error","onSubmit","className","styles","Field","name","placeholder","component","Input","validate","Textarea","type","entries","ProfileInfo","savePhoto","saveProfile","Preloader","height","src","photos","large","userAvatar2","alt","files","length","initialValues","formData","updatedProfile","then","Post","message","likesCount","requiredField","maxLength30","minLength2","MyPosts","React","postsElements","posts","reverse","p","id","values","addPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","profileAction","Profile","ProfileContainer","Number","this","match","params","history","push","getUserProfile","getUserStatus","mountProfile","prevProps","compose","auth","isAuth","withRouter","withRedirectToLogin","FormControl","meta","children","isError","touched","input","restProps","cols","rows","mapStateToProps","WrappedComponent","RedirectComponent","to","max","min","undefined","_slicedToArray","arr","i","Array","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","err","unsupportedIterableToArray","TypeError"],"sourceRoot":""}