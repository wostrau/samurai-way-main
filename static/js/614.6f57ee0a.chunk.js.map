{"version":3,"file":"static/js/614.6f57ee0a.chunk.js","mappings":"qSA2DaA,GAAiBC,EAAAA,EAAAA,GAAqC,CAACC,KAAM,SAA5CD,EA5C0D,SAACE,GACrF,IAAOC,EAAmCD,EAAnCC,aAAcC,EAAqBF,EAArBE,MAAOC,EAAcH,EAAdG,WAE5B,OACI,kBAAMC,SAAUH,EAAhB,WACI,0BACI,SAACI,EAAA,EAAD,CACIC,KAAM,QACNC,YAAa,QACbC,UAAWC,EAAAA,EACXC,SAAU,CAACC,EAAAA,SAGnB,0BACI,SAACN,EAAA,EAAD,CACIC,KAAM,WACNC,YAAa,WACbC,UAAWC,EAAAA,EACXC,SAAU,CAACC,EAAAA,IACXC,KAAM,gBAGd,4BACI,SAACP,EAAA,EAAD,CACIC,KAAM,aACNE,UAAWC,EAAAA,EACXG,KAAM,aAJd,iBAOCT,IAAc,gBAAKU,IAAKV,EAAYW,IAAI,YACxCX,IAAc,SAACE,EAAA,EAAD,CACXC,KAAM,UACNC,YAAa,2BACbC,UAAWC,EAAAA,EACXC,SAAU,CAACC,EAAAA,MAEdT,IAAS,gBAAKa,UAAWC,EAAAA,EAAAA,iBAAhB,SAA0Cd,KACpD,0BACI,+CCtCHe,EAAkB,SAACC,GAAD,MAA0B,CACrDC,OAAQD,EAAME,KAAKD,OACnBhB,WAAYe,EAAME,KAAKjB,aAK3B,GAFuBkB,EAAAA,EAAAA,IAAQJ,EAAiB,CAACK,MAAAA,EAAAA,IAA1BD,ECf6B,SAACrB,GACjD,IAAOsB,EAA6BtB,EAA7BsB,MAAOH,EAAsBnB,EAAtBmB,OAAQhB,EAAcH,EAAdG,WAOtB,OAAIgB,GAAe,SAAC,KAAD,CAAUI,GAAI,cAG7B,4BACI,mCACA,SAAC1B,EAAD,CACIO,SAXK,SAACoB,GACd,IAAOC,EAAwCD,EAAxCC,MAAOC,EAAiCF,EAAjCE,SAAUC,EAAuBH,EAAvBG,WAAYC,EAAWJ,EAAXI,QACpCN,EAAMG,EAAOC,EAAUC,EAAYC,IAU3BzB,WAAYA,W,uKCbtB0B,EAA8C,SAAC7B,GACjD,IAAO8B,EAAkB9B,EAAlB8B,KAAMC,EAAY/B,EAAZ+B,SACPC,EAAUF,EAAKG,SAAWH,EAAK5B,MACrC,OACI,iBAAKa,UAAWiB,EAAO,UAAMhB,EAAAA,EAAAA,YAAN,YAA4BA,EAAAA,EAAAA,OAAiB,GAApE,WACI,yBAAMe,IACLC,IAAW,0BAAOF,EAAK5B,YAKvBgC,EAAW,SAAClC,GACrB,IAAOmC,EAA6BnC,EAA7BmC,MAAgBC,GAAapC,EAAtB8B,MAAd,OAAoC9B,EAApC,IACA,OACI,SAAC6B,GAAD,kBAAiB7B,GAAjB,cACI,qCACIqC,KAAM,GACNC,KAAM,GACFH,GACAC,QAMP3B,EAAQ,SAACT,GAClB,IAAOmC,EAA6BnC,EAA7BmC,MAAgBC,GAAapC,EAAtB8B,MAAd,OAAoC9B,EAApC,IACA,OACI,SAAC6B,GAAD,kBAAiB7B,GAAjB,cACI,oCACQmC,GACAC,S,qGCpCb,IAKYG,EAIAC,EATN7B,EAAoC,SAAC8B,GAC9C,IAAIA,EACJ,MAAO,qBAKEC,GAFMH,EAEkB,GAFF,SAACE,GAAD,OAC/BA,GAASA,EAAME,OAASJ,EAAxB,kBAAyCA,EAAzC,4BAAoEK,IAK3DC,GAFML,EAEiB,EAFD,SAACC,GAAD,OAC/BA,GAASA,EAAME,OAASH,EAAxB,kBAAyCA,EAAzC,4BAAoEI,K,mBCXxE,KAAgB,YAAc,kCAAkC,MAAQ,4BAA4B,iBAAmB","sources":["components/Login/LoginForm.tsx","components/Login/LoginContainer.tsx","components/Login/Login.tsx","components/common/FormControls/FormControls.tsx","utilities/validators.ts","webpack://samurai-way/./src/components/common/FormControls/FormControls.module.css?7a3d"],"sourcesContent":["import {Field, InjectedFormProps, reduxForm} from 'redux-form'\nimport {Input} from '../common/FormControls/FormControls'\nimport {requiredField} from '../../utilities/validators'\nimport styles from '../common/FormControls/FormControls.module.css'\nimport React from 'react'\n\n\ntype CaptchaType = { captchaUrl: null | string };\nexport type FormDataType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha: string\n}\n\nconst LoginForm: React.FC<InjectedFormProps<FormDataType, CaptchaType> & CaptchaType> = (props) => {\n    const {handleSubmit, error, captchaUrl} = props;\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <div>\n                <Field\n                    name={'email'}\n                    placeholder={'Email'}\n                    component={Input}\n                    validate={[requiredField]}\n                />\n            </div>\n            <div>\n                <Field\n                    name={'password'}\n                    placeholder={'Password'}\n                    component={Input}\n                    validate={[requiredField]}\n                    type={'password'}\n                />\n            </div>\n            <div>\n                <Field\n                    name={'rememberMe'}\n                    component={Input}\n                    type={'checkbox'}\n                />remember me\n            </div>\n            {captchaUrl && <img src={captchaUrl} alt=\"captcha\"/>}\n            {captchaUrl && <Field\n                name={'captcha'}\n                placeholder={'Symbols from image above'}\n                component={Input}\n                validate={[requiredField]}\n            />}\n            {error && <div className={styles.formSummaryError}>{error}</div>}\n            <div>\n                <button>Log IN</button>\n            </div>\n        </form>\n    )\n}\n\nexport const LoginReduxForm = reduxForm<FormDataType, CaptchaType>({form: 'login'})(LoginForm)\n","import React from 'react'\nimport {AppStateType} from '../../redux/redux-store'\nimport {connect} from 'react-redux'\nimport {login} from '../../redux/auth-reducer'\nimport {Login} from './Login'\n\n\nexport type mSTPType = {\n    isAuth: boolean\n    captchaUrl: null | string\n}\nexport type mDTPType = {\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\n}\n\nexport const mapStateToProps = (state: AppStateType) => ({\n    isAuth: state.auth.isAuth,\n    captchaUrl: state.auth.captchaUrl\n} as mSTPType)\n\nconst LoginContainer = connect(mapStateToProps, {login} as mDTPType)(Login)\n\nexport default LoginContainer","import React from 'react'\nimport {Redirect} from 'react-router-dom'\nimport {FormDataType, LoginReduxForm} from './LoginForm'\nimport {mDTPType, mSTPType} from './LoginContainer'\n\nexport const Login: React.FC<mDTPType & mSTPType> = (props) => {\n    const {login, isAuth, captchaUrl} = props;\n\n    const onSubmit = (formData: FormDataType) => {\n        const {email, password, rememberMe, captcha} = formData;\n        login(email, password, rememberMe, captcha);\n    };\n\n    if (isAuth) return <Redirect to={'/profile'}/>;\n\n    return (\n        <div>\n            <h1>LOGIN</h1>\n            <LoginReduxForm\n                onSubmit={onSubmit}\n                captchaUrl={captchaUrl}\n            />\n        </div>\n    );\n};","import React from 'react'\nimport styles from './FormControls.module.css'\nimport {WrappedFieldMetaProps} from 'redux-form'\n\n\ntype FormControlPropsType = { meta: WrappedFieldMetaProps }\n\nconst FormControl: React.FC<FormControlPropsType> = (props) => {\n    const {meta, children} = props\n    const isError = meta.touched && meta.error\n    return (\n        <div className={isError ? `${styles.formControl} ${styles.error}` : ''}>\n            <div>{children}</div>\n            {isError && <span>{meta.error}</span>}\n        </div>\n    )\n}\n\nexport const Textarea = (props: any) => {\n    const {input, meta, ...restProps} = props\n    return (\n        <FormControl {...props}>\n            <textarea\n                cols={30}\n                rows={3}\n                {...input}\n                {...restProps}\n            />\n        </FormControl>\n    )\n}\n\nexport const Input = (props: any) => {\n    const {input, meta, ...restProps} = props\n    return (\n        <FormControl {...props}>\n            <input\n                {...input}\n                {...restProps}\n            />\n        </FormControl>\n    )\n}","type FieldValidatorType = (value: string) => string | undefined\n\nexport const requiredField: FieldValidatorType = (value) => {\n    if (value) return undefined\n    return 'field is required'\n}\n\nconst maxLength = (max: number) => (value: string | any[]) =>\n    value && value.length > max ? `Must be ${max} characters or less` : undefined\nexport const maxLength30 = maxLength(30)\n\nconst minLength = (min: number) => (value: string | any[]) =>\n    value && value.length < min ? `Must be ${min} characters or more` : undefined\nexport const minLength2 = minLength(2)","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormControls_formControl__Bze--\",\"error\":\"FormControls_error__rGNdT\",\"formSummaryError\":\"FormControls_formSummaryError__zOU5q\"};"],"names":["LoginReduxForm","reduxForm","form","props","handleSubmit","error","captchaUrl","onSubmit","Field","name","placeholder","component","Input","validate","requiredField","type","src","alt","className","styles","mapStateToProps","state","isAuth","auth","connect","login","to","formData","email","password","rememberMe","captcha","FormControl","meta","children","isError","touched","Textarea","input","restProps","cols","rows","max","min","value","maxLength30","length","undefined","minLength2"],"sourceRoot":""}